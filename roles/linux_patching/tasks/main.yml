---
- setup:
    filter: "{{ item }}"
  loop:
    - 'ansible_distribution*'
    - 'ansible_hostname'
  tags:
    - always

## Check reboot flag in /opt/Tanium/TaniumClient/Tools/CustomTags.txt
- name: Check Reboot Flag
  shell: "grep -E 'TRUE|FALSE' {{ custom_flag_path }}"
  register: autoreboot
  failed_when: "autoreboot.rc != 1 and autoreboot.rc != 0"
  ignore_errors: true
  tags:
    - always

## Run yum update. This updates everything on a system
- name: Update Server
  register: yum_update_out
  async: "{{ yum_update_async }}"
  poll: "{{ yum_update_poll }}"
  yum:
    name: "*"
    state: latest
  when: (autoreboot.stdout is search("TRUE") or autoreboot.stdout is search("FALSE"))
  tags: [ never, update ]

## Check if RHEL6 VMs need a reboot after update
- name: Check if reboot is needed on RHEL6 servers
  shell: "{{ chk_reboot_rhel6_svc }}"
  register: reboot_needed6
  ignore_errors: true
  changed_when: false
  failed_when: "reboot_needed6.rc == 2"
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6")
  tags: [ never, update ]

## Check if RHEL7/8/9 VMs need a reboot after update
- name: Check if reboot is needed RHEL7+
  shell: "{{ chk_reboot_rhel7_svc }}"
  register: reboot_needed
  ignore_errors: true
  changed_when: false
  failed_when: "reboot_needed.rc == 2"
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7") or
        (ansible_distribution == "RedHat" and ansible_distribution_major_version == "8") or
        (ansible_distribution == "RedHat" and ansible_distribution_major_version == "9")
  tags: [ never, update ]

## Reboot RHEL6 VMs
- name: Reboot RHEL6 VMs
  reboot:
    msg: "{{ console_reboot_msg }}"
    pre_reboot_delay: "{{ server_reboot_pre_delay }}"
    post_reboot_delay: "{{ server_reboot_post_delay }}"
    reboot_timeout: "{{ server_reboot_timeout }}"
    test_command: "{{ server_reboot_test_cmd }}"
  ignore_errors: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6" and reboot_needed6.rc == 0 and autoreboot.stdout is search("TRUE-PT"))
  tags: [ never, update ]

## Reboot RHEL7+ VMs
- name: Reboot RHEL7+ VMs
  reboot:
    msg: "{{ console_reboot_msg }}"
    pre_reboot_delay: "{{ server_reboot_pre_delay }}"
    post_reboot_delay: "{{ server_reboot_post_delay }}"
    reboot_timeout: "{{ server_reboot_timeout }}"
    test_command: "{{ server_reboot_test_cmd }}"
  ignore_errors: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7" and reboot_needed.rc == 1 and autoreboot.stdout is search("TRUE-PT")) or 
        (ansible_distribution == "RedHat" and ansible_distribution_major_version == "8" and reboot_needed.rc == 1 and autoreboot.stdout is search("TRUE-PT")) or 
        (ansible_distribution == "RedHat" and ansible_distribution_major_version == "9" and reboot_needed.rc == 1 and autoreboot.stdout is search("TRUE-PT"))
  tags: [ never, update ]

## Print hosts who have autoreboot set to false
- name: Print VMs with autoreboot set to false
  when: autoreboot.stdout is search("FALSE")
  debug: msg="{{ ansible_hostname }} is not set to autoreboot but may have been updated and may need to be rebooted manually."
  tags:
    - always

