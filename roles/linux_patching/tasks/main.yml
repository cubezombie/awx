---
## Tags in use
# - update - runs update tasks
# - reboot - reboots server if custom tag is TRUE and updates require a reboot
# - always - always runs setup, check reboot flag and print reboot flag status
# - never - never runs update or reboot tasks unless update tag is used
# - serviceone - conditionally restarts serviceone

- setup:
    gather_subset: min
    filter:
      - ansible_distribution*
      - ansible_hostname
  tags: always

## Check reboot flag in /opt/Tanium/TaniumClient/Tools/CustomTags.txt
- name: Check Reboot Flag
  shell: "grep -E 'TRUE|FALSE' {{ custom_flag_path }}"
  register: autoreboot
  #failed_when: "autoreboot.rc != 1 and autoreboot.rc != 0 and autoreboot.rc != 2"
  failed_when: autoreboot.stdout is search(No such file or directory) 
  ignore_errors: true
  tags: always

- name: Missing custom reboot flag
  fail:
    msg: "{{ ansible_hostname }} is missing a custom tag"
  when: autoreboot.failed == true

#- name: debugging
#  debug:
#    var: autoreboot

## Disable all repos except redhat.repo
- name: Temporarily disable all yum repos except redhat.repo
  block:
    - name: Create temp dir in /etc/yum.repos.d/
      file:
        path: /etc/yum.repos.d/temp
        state: directory

    - name: Find and move all repo files in /etc/yum.repos.d except redhat.repo
      shell: mv $(find /etc/yum.repos.d/ -type f | grep -v redhat.repo) /etc/yum.repos.d/temp/
  ignore_errors: true
  tags: always

## Checks for any updates but does not update
- name: Test if yum sees updates (no update done)
  yum:
    list=updates
  register: yum_update_test
  ignore_errors: true
  timeout: 120
  tags: always

- name: Verify RPMDB
  shell:
    cmd: rpm --verifydb
  register: rpmdb_broken
  ignore_errors: true
  timeout: 120
  tags: always

## Check for and fix any rpmdb corruption issues
- name: Check for and fix potential rpmdb corruption issues
  block:
    - name: Stop ServiceOne (RHEL 6)
      service:
        name: ServiceOne
        state: stopped
      timeout: 15
      when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6")

    - name: Stop serviceone (RHEL 7+)
      systemd:
        name: serviceone
        state: stopped
      timeout: 15
      when: (ansible_distribution == "RedHat" and ansible_distribution_major_version >= "7")

    - name: Stop rhsmcertd
      service:
        name: rhsmcertd
        state: stopped
      timeout: 15

    - name: Find what is using subscription-manager (ok if failed)
      shell:
        cmd: grep "[[:digit:]]*" /var/run/rhsm/cert.pid
      register: sub_man_pid
      ignore_errors: true
      changed_when: false
      timeout: 15

    - name: Attempt to kill what is using subscription-manager
      block:
        - name: Kill subscription-manager pid
          shell:
            cmd: kill -9 $(cat /var/run/rhsm/cert.pid)
          register: kill_certpid
          timeout: 15

        - name: Remove rhsm pid if no process owns it (ok if failed)
          shell:
            cmd: rm -f /var/run/rhsm/cert.pid
          when: 'kill_certpid.failed == true and kill_certpid.stderr is search("No such process")'
          timeout: 15
      when: sub_man_pid.failed == false
      ignore_errors: true

    - name: Rebuild RPMDB
      block:
        - name: Kill all rpm/yum commands
          shell:
            cmd: kill -9 $(ps -ef | grep -v grep | grep "rpm\|yum" | awk '{ if($3=1){ print $2 } }')
          ignore_errors: true
          timeout: 15

        - name: remove dbenv lock file
          file:
            path: /var/lib/rpm/.dbenv.lock
            state: absent
          timeout: 15

        - name: remove rpm lock file
          file:
            path: /var/lib/rpm/.rpm.lock
            state: absent
          timeout: 15

        - name: backup rpmdb files
          shell:
            cmd: mv /var/lib/rpm/__db* /tmp/.
          timeout: 30

        - name: rebuild rpmdb
          command:
            cmd: rpm --rebuilddb
          timeout: 180

        - name: verify rpmdb
          shell:
            cmd: rpm --verifydb
          timeout: 120

        - name: start rhsmcertd
          service:
            name: rhsmcertd
            state: started
          timeout: 15

      rescue:
        - name: restore rpmdb files
          shell:
            cmd: mv /tmp/__db* /var/lib/rpm
          register: rpmdb_revert
          timeout: 30

        - name: successful rpmdb restore
          fail:
            msg: "Failed to rebuild rpmdb, db files restored successfully"
          when: rpmdb_revert.failed == false
          timeout: 30

  always:
    - name: Start ServiceOne (RHEL 6)
      service:
        name: ServiceOne
        state: started
      when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6")
      timeout: 15

    - name: Start serviceone (RHEL 7+)
      systemd:
        name: serviceone
        state: started
      when: (ansible_distribution == "RedHat" and ansible_distribution_major_version >= "7")
      timeout: 15

    - name: Start rhsmcertd
      service:
        name: rhsmcertd
        state: started
      timeout: 15
  when: yum_update_test.failed == true or rpmdb_broken.failed == true
  tags: always

## Run yum update. This updates everything on a system
- name: Update Server
  register: yum_update_out
  timeout: "{{ yum_update_timeout }}"
  yum:
    name: "*"
    state: latest
  when: (autoreboot.stdout is search("TRUE") or autoreboot.stdout is search("FALSE"))
  tags: [ never, update ]

## Check if RHEL6 VMs need a reboot after update
- name: Check if reboot is needed on RHEL6 servers
  shell: "{{ chk_reboot_rhel6_svc }}"
  register: reboot_needed6
  ignore_errors: true
  changed_when: false
  failed_when: "reboot_needed6.rc == 2"
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6")
  tags: [ never, update ]

## Check if RHEL7/8/9 VMs need a reboot after update
- name: Check if reboot is needed RHEL7+
  shell: "{{ chk_reboot_rhel7_svc }}"
  register: reboot_needed
  ignore_errors: true
  changed_when: false
  failed_when: "reboot_needed.rc == 2"
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version >= "7")
  tags: [ never, update ]

## Reboot RHEL6 VMs
- name: Reboot RHEL6 VMs
  reboot:
    msg: "{{ console_reboot_msg }}"
    pre_reboot_delay: "{{ server_reboot_pre_delay }}"
    post_reboot_delay: "{{ server_reboot_post_delay }}"
    reboot_timeout: "{{ server_reboot_timeout }}"
    test_command: "{{ server_reboot_test_cmd }}"
  ignore_errors: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6" and reboot_needed6.rc == 0 and autoreboot.stdout is search("TRUE-PT"))
  tags: [ never, reboot ]

## Reboot RHEL7+ VMs
- name: Reboot RHEL7+ VMs
  reboot:
    msg: "{{ console_reboot_msg }}"
    pre_reboot_delay: "{{ server_reboot_pre_delay }}"
    post_reboot_delay: "{{ server_reboot_post_delay }}"
    reboot_timeout: "{{ server_reboot_timeout }}"
    test_command: "{{ server_reboot_test_cmd }}"
  ignore_errors: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version >= "7" and reboot_needed.rc == 1 and autoreboot.stdout is search("TRUE-PT"))
  tags: [ never, reboot ]

## Re-enable all repos
- name: Re-enable all repos in /etc/yum.repos.d
  block:
    - name: Move repo files back to /etc/yum.repos.d
      shell: mv $(find /etc/yum.repos.d/temp/ -type f | grep repo) /etc/yum.repos.d/

    - name: Remove temp dir in /etc/yum.repos.d
      file:
        path: /etc/yum.repos.d/temp
        state: absent
  ignore_errors: true
  tags: always

## Print hosts who have autoreboot set to false
- name: Print VMs with autoreboot set to false
  when: autoreboot.stdout is search("FALSE")
  debug: msg="{{ ansible_hostname }} is not set to autoreboot but may have been updated and may need to be rebooted manually."
  tags: always

## Restart service1 on RHEL7 when called
#- name: Restart ServiceOne
#  systemd:
#    state: restarted
#    name: serviceone
#  tags: [ never, serviceone ]
#  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version >= "8" and yum_update_out.changed == true and reboot_needed.stdout_lines is search("Reboot should not be necessary")) or
#        (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7" and yum_update_out.changed == true and reboot_needed.stdout_lines is search("Reboot is probably not necessary"))

